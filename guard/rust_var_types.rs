use std::mem;
use std::char;

#[allow(unused)]
pub fn run() {

    // 注意：
    // 变量前的“_”可以避免[unused variable]警告

    // 默认的整型是i32
    let _v1_1 = 123;
    // 默认的浮点型是f64
    let _v1_2 = 3.14;
    // 根据CPU位数自动决定
    let _v1_3: isize = 123;
    let _v1_3: usize = 123;
    let _bit_of_usize = mem::size_of::<usize>();
    let _bit_of_isize = mem::size_of::<isize>();
    // 获取usize/isize的位数，请注意32位为32，64位为8
    println!("bit of usize: {_bit_of_usize}");
    println!("bit of isize: {_bit_of_isize}");

    // 带符号整型
    let _v2_1: i8 = -127; // -128 ~ 127
    let _v2_2: i16 = -32767; // -32768 ~ 32767
    let _v2_3: i32 = -2147483647; // -2147483648 ~ 2147483647
    let _v2_4: i64 = -2147483647; // -9223372036854775808 ~ 9223372036854775807
    let _v2_5: i128 = -170141183460469231731687303715884105727; // -170141183460469231731687303715884105728 ~ 170141183460469231731687303715884105727

    // 无符号整型
    let _v3_1: u8 = 255; // 0 ~ 255
    let _v3_2: u16 = 255; // 0 ~ 65535
    let _v3_3: u32 = 255; // 0 ~ 4294967295
    let _v3_4: u64 = 255; // 0 ~ 18446744073709551615
    let _v3_5: u128 = 255; // 0 ~ 340282366920938463463374607431768211455

    // 浮点数
    let _v4_1: f32 = 3.4e38; // 单精度浮点数，6位有效数字，–3.4e38 ~ 3.4e38
    let _v4_2: f64 = 1.8e307; // 单精度浮点数，15位有效数字，–1.8e307 ~ 1.8e307

    // 布尔
    let _v5_1: bool = true;
    let _v5_2: bool = false;

    // 字符
    let _v6_1: char = '😀'; // 基于Unicode的字符，可展示各种字符
    let _v6_2 = char::from_u32(_v6_1 as u32).unwrap(); // 通过值创建
    println!("char: {_v6_2}"); // 打印也兼容




    // 值的多种表示
    let _v5_1 = 123456; // 十进制
    let _v5_2 = 0x7B; // 十六进制
    let _v5_3 = 0o173; // 八进制
    let _v5_4 = 0b1111011; // 二进制
    let _v5_5 = b'A'; // u8字节
    let _v5_6 = 12_3_456; // 值可以任意添加下划线以方便阅读






    

}